CAU 1:
Cho mảng 2 chiều chứa các số nguyên, kích thước M x N.

Hiện thực hàm:

int findMaxColumn(int arr[][1000], int row, int col);
Trong đó; arr, row và col lần lượt là mảng 2 chiều, số hàng và số cột của mảng. Tìm chỉ số của cột có tổng tất cả các phần tử lớn nhất.

Lưu ý: Cột đầu tiên được đánh chỉ số 0. Nếu có nhiều hơn một cột có tổng lớn nhất, ta chọn cột có chỉ số lớn nhất.

Ghi chú: (Các) thư viện iostream và climits đã được khai báo, và namespace std đã được sử dụng.
CODE:
int findMaxColumn(int arr[][1000], int row, int col) {
    int maxSum = INT_MIN;  // Biến lưu tổng lớn nhất hiện tại
    int maxColIndex = -1;  // Biến lưu chỉ số cột có tổng lớn nhất

    for (int c = 0; c < col; ++c) {
        int colSum = 0;  // Biến lưu tổng của cột hiện tại
        for (int r = 0; r < row; ++r) {
            colSum += arr[r][c];  // Cộng phần tử tại hàng r, cột c
        }

        // Kiểm tra nếu tổng của cột hiện tại lớn hơn tổng lớn nhất hiện tại
        if (colSum > maxSum) {
            maxSum = colSum;
            maxColIndex = c;
        } else if (colSum == maxSum) {
            // Nếu tổng bằng với tổng lớn nhất hiện tại, chọn cột có chỉ số lớn hơn
            if (c > maxColIndex) {
                maxColIndex = c;
            }
        }
    }

    return maxColIndex;  // Trả về chỉ số cột có tổng lớn nhất
}

CAU 2:
Cho mảng 2 chiều chứa các số nguyên, kích thước N x N.

Hiện thực hàm:

int diagonalProduct(int arr[][1000], int row, int col);
Trong đó; arr, row và col lần lượt là mảng 2 chiều, số hàng và số cột của mảng. Tìm tích của tất cả các phần tử trong đường chéo chính của mảng.

Ghi chú: (Các) thư viện iostream, và string đã được khai báo, và namespace std đã được sử dụng.
CODE:
int diagonalProduct(int arr[][1000], int row, int col) {
    int product = 1;  

    for (int i = 0; i < row && i < col; ++i) {
        product *= arr[i][i];  
    }

    return product;  
}

CAU 3:
Cho mảng 2 chiều chứa các số nguyên, kích thước N x N.

Hiện thực hàm:

bool isSymmetric(int arr[][1000], int row, int col);
Trong đó; arr, row và col lần lượt là mảng 2 chiều, số hàng và số cột của mảng. Một ma trận được gọi là đối xứng nếu với mọi i, j; giá trị của phần tử ở hàng i, cột j luôn bằng giá trị của phần tử ở hàng j, cột i. Kiểm tra xem mảng này có phải là một ma trận đối xứng hay không; trả về true nếu mảng này là ma trận đối xứng; ngược lại, trả về false.

Ghi chú: (Các) thư viện iostream và string đã được khai báo, và namespace std đã được sử dụng.
CODE:
bool isSymmetric(int arr[][1000], int row, int col) {
    bool isSym = false;
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (arr[i][j] == arr[j][i])
            isSym = true;
            else if (arr[i][j] != arr[j][i])
            return false;
        }
    }
    if (isSym == true) return true;
    else return false;
}

CAU 4:
Cho mảng 2 chiều chứa các số nguyên, kích thước M x N.

Hiện thực hàm:

int diagonalDiff(int arr[][1000], int row, int col, int x, int y);
Trong đó; arr, row và col lần lượt là mảng 2 chiều, số hàng, số cột của mảng; x và y biểu thị ô có số hàng là x và số cột là y trong mảng đã cho (0≤x<row và 0≤y<col). Tổng của một đường chéo là tổng tất cả các phần tử nằm trên đường chéo đó. Tìm giá trị tuyệt đối của hiệu giữa hai đường chéo đi qua ô có số hàng x và số cột y.

Ghi chú: (Các) thư viện iostream, vector và string đã được khai báo, và namespace std đã được sử dụng.
CODE:
int diagonalDiff(int arr[][1000], int row, int col, int x, int y) {
    int primaryDiagonalSum = 0;
    int secondaryDiagonalSum = 0;

    int i = x, j = y;
    while (i >= 0 && j >= 0) {
        primaryDiagonalSum += arr[i][j];
        i--;
        j--;
    }
    i = x + 1, j = y + 1;
    while (i < row && j < col) {
        primaryDiagonalSum += arr[i][j];
        i++;
        j++;
    }

    i = x, j = y;
    while (i >= 0 && j < col) {
        secondaryDiagonalSum += arr[i][j];
        i--;
        j++;
    }
    i = x + 1, j = y - 1;
    while (i < row && j >= 0) {
        secondaryDiagonalSum += arr[i][j];
        i++;
        j--;
    }

    int difference = abs(primaryDiagonalSum - secondaryDiagonalSum);

    return difference;
}
